import logging
import telebot
from Config import TOKEN
from datetime import datetime, timedelta
from Parse_lessons import fetch_schedule
from Parser import fetch_replacements
import json
import time
import threading

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(TOKEN)

# –ö–∞—Ä—Ç–∞ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
DAYS_MAP = {
    0: "–ü–û–ù–ï–î–ï–õ–¨–ù–ò–ö",
    1: "–í–¢–û–†–ù–ò–ö",
    2: "–°–†–ï–î–ê",
    3: "–ß–ï–¢–í–ï–†–ì",
    4: "–ü–Ø–¢–ù–ò–¶–ê",
    5: "–°–£–ë–ë–û–¢–ê",
    6: "–í–û–°–ö–†–ï–°–ï–ù–¨–ï"
}

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º–∏
USERS_FILE = 'users.json'

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∏–∑ JSON
def load_users():
    try:
        with open(USERS_FILE, 'r', encoding='utf-8') as file:
            return json.load(file)
    except (FileNotFoundError, json.JSONDecodeError):
        return []

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –≤ JSON
def save_users(users):
    with open(USERS_FILE, 'w', encoding='utf-8') as file:
        json.dump(users, file, ensure_ascii=False, indent=4)

# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.reply_to(message, "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è. –í–æ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                          "üìÖ /schedule_week ‚Äî —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –≤—Å—é –Ω–µ–¥–µ–ª—é\n"
                          "üìÜ /schedule ‚Äî —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞\n"
                          "üîÑ /replacements ‚Äî –∑–∞–º–µ–Ω—ã –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏\n"
                          "‚úÖ /subscribe ‚Äî –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É\n"
                          "‚ùå /unsubscribe ‚Äî –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏")

# –ö–æ–º–∞–Ω–¥–∞ /subscribe (–ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É)
@bot.message_handler(commands=['subscribe'])
def subscribe(message):
    user_id = message.chat.id
    users = load_users()
    if user_id not in users:
        users.append(user_id)
        save_users(users)
        bot.reply_to(message, "‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è!")
    else:
        bot.reply_to(message, "‚ö†Ô∏è –í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É.")

# –ö–æ–º–∞–Ω–¥–∞ /unsubscribe (–æ—Ç–ø–∏—Å–∫–∞ –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏)
@bot.message_handler(commands=['unsubscribe'])
def unsubscribe(message):
    user_id = message.chat.id
    users = load_users()
    if user_id in users:
        users.remove(user_id)
        save_users(users)
        bot.reply_to(message, "‚ùå –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏.")
    else:
        bot.reply_to(message, "‚ö†Ô∏è –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É.")

# –ö–æ–º–∞–Ω–¥–∞ /schedule_week (–ø–æ–ª–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é)
@bot.message_handler(commands=['schedule_week'])
def schedule_week(message):
    schedule = fetch_schedule()
    bot.reply_to(message, f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é:\n\n{schedule}" if schedule else "‚ö†Ô∏è –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

# –ö–æ–º–∞–Ω–¥–∞ /schedule (—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞)
@bot.message_handler(commands=['schedule'])
def schedule_tomorrow(message):
    tomorrow = (datetime.now().weekday() + 1) % 7
    schedule = get_schedule_for_day(tomorrow)

    if schedule:
        bot.reply_to(message, f"üìÜ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ ({DAYS_MAP[tomorrow]}):\n\n" + schedule)
    else:
        bot.reply_to(message, f"‚ö†Ô∏è –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ ({DAYS_MAP[tomorrow]}) –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

# –ö–æ–º–∞–Ω–¥–∞ /replacements (–∑–∞–º–µ–Ω—ã –Ω–∞ –∑–∞–≤—Ç—Ä–∞)
@bot.message_handler(commands=['replacements'])
def replacements(message):
    tomorrow = (datetime.now().weekday() + 1) % 7
    replacement_list = fetch_replacements()

    if replacement_list:
        bot.reply_to(message, f"üîÑ –ó–∞–º–µ–Ω—ã –Ω–∞ –∑–∞–≤—Ç—Ä–∞ ({DAYS_MAP[tomorrow]}):\n\n" + "\n".join(replacement_list))
    else:
        bot.reply_to(message, "üîÑ –ù–µ—Ç –∑–∞–º–µ–Ω –Ω–∞ –∑–∞–≤—Ç—Ä–∞.")

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å
def get_schedule_for_day(day):
    if DAYS_MAP[day] == "–í–û–°–ö–†–ï–°–ï–ù–¨–ï":
        return "–ó–∞–≤—Ç—Ä–∞ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ ‚Äî –ø–∞—Ä –Ω–µ—Ç!"

    full_schedule = fetch_schedule()
    if not full_schedule:
        return None

    blocks = full_schedule.split('---')
    schedule = []
    found = False

    for block in blocks:
        if DAYS_MAP[day] in block:
            found = True
            schedule.append(f"{DAYS_MAP[day]}")
        elif found and any(day in block for day in DAYS_MAP.values()):
            break
        elif found:
            schedule.append(block.strip())

    return "\n".join(schedule) if schedule else None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
def send_daily_schedule():
    while True:
        now = datetime.now()
        target_time = now.replace(hour=20, minute=0, second=0, microsecond=0)

        if now > target_time:
            target_time += timedelta(days=1)

        sleep_time = (target_time - now).total_seconds()
        logging.info(f"–û–∂–∏–¥–∞–Ω–∏–µ –¥–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {sleep_time // 60} –º–∏–Ω—É—Ç.")
        time.sleep(sleep_time)

        logging.info("–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è...")

        tomorrow = (datetime.now().weekday() + 1) % 7
        schedule = get_schedule_for_day(tomorrow)
        replacements = fetch_replacements()

        message = f"üìÜ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ ({DAYS_MAP[tomorrow]}):\n\n"
        if schedule:
            message += schedule + "\n\n"
        else:
            message += "‚ö†Ô∏è –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n\n"

        if replacements:
            message += f"üîÑ –ó–∞–º–µ–Ω—ã –Ω–∞ –∑–∞–≤—Ç—Ä–∞:\n" + "\n".join(replacements)
        else:
            message += "üîÑ –ù–µ—Ç –∑–∞–º–µ–Ω –Ω–∞ –∑–∞–≤—Ç—Ä–∞."

        users = load_users()
        for user_id in users:
            try:
                bot.send_message(user_id, message, parse_mode="HTML")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

# –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
threading.Thread(target=send_daily_schedule, daemon=True).start()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    bot.polling(none_stop=True)